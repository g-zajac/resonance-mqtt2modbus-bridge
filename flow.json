[
    {
        "id": "960844499113a186",
        "type": "tab",
        "label": "Motor set",
        "disabled": false,
        "info": ""
    },
    {
        "id": "420115180ec01f26",
        "type": "tab",
        "label": "Motor Status",
        "disabled": false,
        "info": ""
    },
    {
        "id": "c35c11b14a49f9c6",
        "type": "tab",
        "label": "Autorestart",
        "disabled": false,
        "info": ""
    },
    {
        "id": "9e1942277b6df794",
        "type": "tab",
        "label": "playground",
        "disabled": false,
        "info": ""
    },
    {
        "id": "73c9ea50fd80ed3a",
        "type": "tab",
        "label": "MQTT",
        "disabled": false,
        "info": ""
    },
    {
        "id": "012b16bda007fdb7",
        "type": "modbus-client",
        "name": "Stepper Motor",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "tcpHost": "192.168.86.110",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true
    },
    {
        "id": "257b46ed4735bb71",
        "type": "mqtt-broker",
        "name": "toto broker",
        "broker": "192.168.86.128",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "41ce2818206f3844",
        "type": "modbus-write",
        "z": "960844499113a186",
        "name": "SCL",
        "showStatusActivities": false,
        "showErrors": false,
        "unitid": "",
        "dataType": "HoldingRegister",
        "adr": "124",
        "quantity": "1",
        "server": "012b16bda007fdb7",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "x": 390,
        "y": 660,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "6a5425a26fe865f0",
        "type": "inject",
        "z": "960844499113a186",
        "name": "STOP",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "226",
        "payloadType": "num",
        "x": 150,
        "y": 740,
        "wires": [
            [
                "41ce2818206f3844"
            ]
        ]
    },
    {
        "id": "9411746e158d27bb",
        "type": "inject",
        "z": "960844499113a186",
        "name": "REL MOVE",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "102",
        "payloadType": "num",
        "x": 150,
        "y": 680,
        "wires": [
            [
                "41ce2818206f3844"
            ]
        ]
    },
    {
        "id": "371a79b4aee77e76",
        "type": "inject",
        "z": "960844499113a186",
        "name": "ABS MOVE",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "103",
        "payloadType": "num",
        "x": 160,
        "y": 640,
        "wires": [
            [
                "41ce2818206f3844"
            ]
        ]
    },
    {
        "id": "85c4770714912f6c",
        "type": "modbus-read",
        "z": "960844499113a186",
        "name": "Read distance",
        "topic": "",
        "showStatusActivities": false,
        "logIOActivities": false,
        "showErrors": false,
        "unitid": "",
        "dataType": "InputRegister",
        "adr": "30",
        "quantity": "2",
        "rate": "1",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "012b16bda007fdb7",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 770,
        "y": 180,
        "wires": [
            [],
            [
                "5a023d20629b330f"
            ]
        ]
    },
    {
        "id": "5a023d20629b330f",
        "type": "modbus-response",
        "z": "960844499113a186",
        "name": "",
        "registerShowMax": 20,
        "x": 970,
        "y": 180,
        "wires": []
    },
    {
        "id": "9c5d7bfdb9c5296a",
        "type": "modbus-read",
        "z": "960844499113a186",
        "name": "Position",
        "topic": "",
        "showStatusActivities": false,
        "logIOActivities": false,
        "showErrors": false,
        "unitid": "",
        "dataType": "HoldingRegister",
        "adr": "7",
        "quantity": "2",
        "rate": "1",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "012b16bda007fdb7",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 660,
        "y": 680,
        "wires": [
            [],
            [
                "24dac28f3b6f8063",
                "f6ea2bccbc3feb39"
            ]
        ]
    },
    {
        "id": "4053f29f23c36d0f",
        "type": "change",
        "z": "960844499113a186",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "position",
                "pt": "flow",
                "to": "payload.data.0",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1040,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "24dac28f3b6f8063",
        "type": "debug",
        "z": "960844499113a186",
        "name": "DEBUG",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 820,
        "y": 680,
        "wires": []
    },
    {
        "id": "f6ea2bccbc3feb39",
        "type": "buffer-parser",
        "z": "960844499113a186",
        "name": "",
        "data": "payload.buffer",
        "dataType": "msg",
        "specification": "spec",
        "specificationType": "ui",
        "items": [
            {
                "type": "uint32le",
                "name": "Position",
                "offset": 0,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            }
        ],
        "swap1": "",
        "swap2": "swap16",
        "swap3": "",
        "swap1Type": "swap",
        "swap2Type": "swap",
        "swap3Type": "swap",
        "msgProperty": "payload",
        "msgPropertyType": "str",
        "resultType": "value",
        "resultTypeType": "output",
        "multipleResult": false,
        "fanOutMultipleResult": false,
        "setTopic": true,
        "outputs": 1,
        "x": 830,
        "y": 760,
        "wires": [
            [
                "ab6392ada304db91"
            ]
        ]
    },
    {
        "id": "ab6392ada304db91",
        "type": "debug",
        "z": "960844499113a186",
        "name": "Position",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1040,
        "y": 760,
        "wires": []
    },
    {
        "id": "d893c2ffc0e6be22",
        "type": "inject",
        "z": "960844499113a186",
        "name": "Find home",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "120",
        "payloadType": "num",
        "x": 150,
        "y": 780,
        "wires": [
            [
                "41ce2818206f3844"
            ]
        ]
    },
    {
        "id": "cabd6d6ccc31a964",
        "type": "mqtt in",
        "z": "960844499113a186",
        "name": "",
        "topic": "resonance/actor/column/98/find_home",
        "qos": "2",
        "datatype": "auto",
        "broker": "257b46ed4735bb71",
        "nl": false,
        "rap": true,
        "rh": 0,
        "x": 210,
        "y": 860,
        "wires": [
            [
                "16455a5d29051855"
            ]
        ]
    },
    {
        "id": "16455a5d29051855",
        "type": "trigger",
        "z": "960844499113a186",
        "name": "",
        "op1": "120",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "3",
        "extend": true,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 2,
        "x": 440,
        "y": 860,
        "wires": [
            [
                "41ce2818206f3844"
            ],
            []
        ]
    },
    {
        "id": "e3f0c29b.15917",
        "type": "function",
        "z": "c35c11b14a49f9c6",
        "name": "Request Token",
        "func": "msg.payload = {\n    \"client_id\": \"node-red-editor\",\n    \"grant_type\": \"password\",\n    \"scope\": \"*\",\n    \"username\": \"type or username\",\n    \"password\": \"type your password\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 400,
        "y": 140,
        "wires": [
            [
                "40715257.e3114c"
            ]
        ]
    },
    {
        "id": "62e6b42a.d2df5c",
        "type": "inject",
        "z": "c35c11b14a49f9c6",
        "name": "Manual reload",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 190,
        "y": 140,
        "wires": [
            [
                "e3f0c29b.15917"
            ]
        ]
    },
    {
        "id": "40715257.e3114c",
        "type": "http request",
        "z": "c35c11b14a49f9c6",
        "name": "Token",
        "method": "POST",
        "ret": "txt",
        "paytoqs": false,
        "url": "http://localhost:1880/auth/token",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 590,
        "y": 140,
        "wires": [
            [
                "27f2916.2d1306e"
            ]
        ]
    },
    {
        "id": "27f2916.2d1306e",
        "type": "function",
        "z": "c35c11b14a49f9c6",
        "name": "Confirm token",
        "func": "// get the status of the request\nvar status = msg.statusCode;\n//var token = {};\nvar token = '';\nmsg.headers ={};\n\n//let node = feedback;\n\nswitch(status){\n    case 200:\n        node.log(\"Secure restart\");\n        token = JSON.parse(msg.payload);\n        token = 'Bearer '+token.access_token;\n        msg.headers = {\n            \"Authorization\": token,\n            \"Node-RED-Deployment-Type\":\"reload\"\n        }\nmsg.payload =\"\";\n        break;\n    case 204:\n        node.log(\"Secure without restart\");\n        global.set('result','\tSuccess - with no further content');\n        break;\n    case 400:\n        node.warn(\"Bad request\");\n        break;\n    case 401:\n        node.warn(\"Not authorized\");\n        break;\n    case 403:\n        node.warn(\"Forbidden\");\n        break;\n    case 404:\n        node.log(\"Unsecure restart\");\n        msg.headers = {\n            \"Node-RED-Deployment-Type\":\"reload\"\n        }\n        break;\n    case 409:\n        node.warn(\"Version mismatch\");\n        break;\n    case 500:\n        node.error(\"Server Error\");\n        break;\n    default:\n        node.warn(\"Unknown Error\");\n       break;\n}\n\nmsg.payload = \"\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 780,
        "y": 140,
        "wires": [
            [
                "cbf97372.7169f"
            ]
        ],
        "info": "Restart of Node-Red flows.\nWill check if the action needs security or not.\nNote: if the first 5 attemps return a statuscode 403 'forbidden'\nthen the server will break and only way to recover is then to\nrestart the service"
    },
    {
        "id": "cbf97372.7169f",
        "type": "http request",
        "z": "c35c11b14a49f9c6",
        "name": "Restart",
        "method": "POST",
        "ret": "txt",
        "paytoqs": false,
        "url": "http://localhost:1880/flows",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 980,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "56e0ff0a97a267e8",
        "type": "comment",
        "z": "960844499113a186",
        "name": "16bit - 65535 max",
        "info": "",
        "x": 550,
        "y": 20,
        "wires": []
    },
    {
        "id": "0ead7636cfada085",
        "type": "modbus-response",
        "z": "960844499113a186",
        "name": "",
        "registerShowMax": 20,
        "x": 970,
        "y": 80,
        "wires": []
    },
    {
        "id": "bb0bdc4c7d4f9d87",
        "type": "debug",
        "z": "960844499113a186",
        "name": "num2buffer",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 750,
        "y": 20,
        "wires": []
    },
    {
        "id": "2a79d0f3.318d3",
        "type": "function",
        "z": "9e1942277b6df794",
        "name": "float32 -> int16",
        "func": "let base = new ArrayBuffer(4); //4 bytes\nlet int16_view = new Int16Array(base);\nlet float32_view = new Float32Array(base);\n\nfloat32_view[0] = msg.payload;\n\nlet rValue = [];\nrValue.push(int16_view[0]);\nrValue.push(int16_view[1]);\n\nmsg.payload = rValue;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 640,
        "y": 160,
        "wires": [
            [
                "46d2875c.9da9e8",
                "4874a5f0.1de0dc"
            ]
        ]
    },
    {
        "id": "8f55454e.8ce888",
        "type": "inject",
        "z": "9e1942277b6df794",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0.5",
        "payloadType": "num",
        "x": 280,
        "y": 180,
        "wires": [
            [
                "64b0d21e.d3996c"
            ]
        ]
    },
    {
        "id": "33a7dcdd.dff8f4",
        "type": "inject",
        "z": "9e1942277b6df794",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1.0",
        "payloadType": "num",
        "x": 280,
        "y": 120,
        "wires": [
            [
                "64b0d21e.d3996c"
            ]
        ]
    },
    {
        "id": "53bca83.01fdb58",
        "type": "inject",
        "z": "9e1942277b6df794",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0.25",
        "payloadType": "num",
        "x": 280,
        "y": 240,
        "wires": [
            [
                "64b0d21e.d3996c"
            ]
        ]
    },
    {
        "id": "6b0b8b9.0e44774",
        "type": "inject",
        "z": "9e1942277b6df794",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "12345.67891234567",
        "payloadType": "num",
        "x": 310,
        "y": 300,
        "wires": [
            [
                "64b0d21e.d3996c"
            ]
        ]
    },
    {
        "id": "46d2875c.9da9e8",
        "type": "debug",
        "z": "9e1942277b6df794",
        "name": "int16",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 850,
        "y": 160,
        "wires": []
    },
    {
        "id": "64b0d21e.d3996c",
        "type": "function",
        "z": "9e1942277b6df794",
        "name": "link",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 440,
        "y": 160,
        "wires": [
            [
                "2a79d0f3.318d3"
            ]
        ]
    },
    {
        "id": "acabf386.47cdf",
        "type": "debug",
        "z": "9e1942277b6df794",
        "name": "float32",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 850,
        "y": 220,
        "wires": []
    },
    {
        "id": "4874a5f0.1de0dc",
        "type": "function",
        "z": "9e1942277b6df794",
        "name": "int16 -> float32",
        "func": "let base = new ArrayBuffer(4); //4 bytes\nlet int16_view = new Int16Array(base);\nlet float32_view = new Float32Array(base);\n\nint16_view[0] = msg.payload[0];\nint16_view[1] = msg.payload[1];\n\nmsg.payload = float32_view[0];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 640,
        "y": 220,
        "wires": [
            [
                "acabf386.47cdf"
            ]
        ]
    },
    {
        "id": "392cd1148593d33f",
        "type": "function",
        "z": "960844499113a186",
        "name": "int -> 2x int16",
        "func": "let base = new ArrayBuffer(4); //4 bytes\nlet int16_view = new Uint16Array(base);\nlet float32_view = new Int32Array(base);\n\nfloat32_view[0] = msg.payload;\n\nlet rValue = [];\nrValue.push(int16_view[1]);\nrValue.push(int16_view[0]);\n\nmsg.payload = rValue;\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 80,
        "wires": [
            [
                "bb0bdc4c7d4f9d87",
                "4734e0a461a5e22c"
            ]
        ]
    },
    {
        "id": "fae10378dd221947",
        "type": "modbus-read",
        "z": "420115180ec01f26",
        "name": "Read temperature",
        "topic": "resonance/",
        "showStatusActivities": false,
        "logIOActivities": false,
        "showErrors": false,
        "unitid": "",
        "dataType": "HoldingRegister",
        "adr": "12",
        "quantity": "1",
        "rate": "3",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "012b16bda007fdb7",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 170,
        "y": 80,
        "wires": [
            [],
            [
                "eabb1d5b87aa3013"
            ]
        ]
    },
    {
        "id": "2b2dd7e2edddebdc",
        "type": "change",
        "z": "420115180ec01f26",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "temperature",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 800,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "eabb1d5b87aa3013",
        "type": "function",
        "z": "420115180ec01f26",
        "name": "",
        "func": "msg.payload = msg.payload.data[0] / 10;\nnode.status({fill:\"green\",shape:\"ring\",text: msg.payload});\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 80,
        "wires": [
            [
                "2b2dd7e2edddebdc"
            ]
        ]
    },
    {
        "id": "f6e0611e971e1f63",
        "type": "modbus-read",
        "z": "420115180ec01f26",
        "name": "Error code",
        "topic": "",
        "showStatusActivities": false,
        "logIOActivities": false,
        "showErrors": false,
        "unitid": "",
        "dataType": "HoldingRegister",
        "adr": "0",
        "quantity": "1",
        "rate": "5",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "012b16bda007fdb7",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 140,
        "y": 360,
        "wires": [
            [],
            [
                "f33d742057ec5a97"
            ]
        ]
    },
    {
        "id": "f33d742057ec5a97",
        "type": "debug",
        "z": "420115180ec01f26",
        "name": "Errorr",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 330,
        "y": 360,
        "wires": []
    },
    {
        "id": "fc3234b0ede3d44e",
        "type": "mqtt in",
        "z": "73c9ea50fd80ed3a",
        "name": "",
        "topic": "resonance/actor/column/98/in",
        "qos": "2",
        "datatype": "auto",
        "broker": "257b46ed4735bb71",
        "nl": false,
        "rap": true,
        "rh": 0,
        "x": 200,
        "y": 140,
        "wires": [
            [
                "6ca510992b07e7df"
            ]
        ]
    },
    {
        "id": "6ca510992b07e7df",
        "type": "debug",
        "z": "73c9ea50fd80ed3a",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 490,
        "y": 140,
        "wires": []
    },
    {
        "id": "5a27b0ae04b88e93",
        "type": "mqtt out",
        "z": "73c9ea50fd80ed3a",
        "name": "resonance/actor/column/sys",
        "topic": "resonance/actor/column/98/sys",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "257b46ed4735bb71",
        "x": 820,
        "y": 280,
        "wires": []
    },
    {
        "id": "2390a939bb338198",
        "type": "inject",
        "z": "73c9ea50fd80ed3a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 170,
        "y": 300,
        "wires": [
            [
                "50eb5cd4c516fa31"
            ]
        ]
    },
    {
        "id": "69491e7dae6b1b8f",
        "type": "function",
        "z": "960844499113a186",
        "name": "scale to 1R",
        "func": "msg.payload = msg.payload * 20000;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 80,
        "wires": [
            [
                "392cd1148593d33f"
            ]
        ]
    },
    {
        "id": "efcd973cf9259154",
        "type": "inject",
        "z": "960844499113a186",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 90,
        "y": 80,
        "wires": [
            [
                "69491e7dae6b1b8f"
            ]
        ]
    },
    {
        "id": "1dcb40b0e44349be",
        "type": "inject",
        "z": "960844499113a186",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "2",
        "payloadType": "num",
        "x": 90,
        "y": 120,
        "wires": [
            [
                "69491e7dae6b1b8f"
            ]
        ]
    },
    {
        "id": "366bfde2ae019b87",
        "type": "inject",
        "z": "960844499113a186",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "4",
        "payloadType": "num",
        "x": 90,
        "y": 160,
        "wires": [
            [
                "69491e7dae6b1b8f"
            ]
        ]
    },
    {
        "id": "4734e0a461a5e22c",
        "type": "modbus-write",
        "z": "960844499113a186",
        "name": "Set distance",
        "showStatusActivities": true,
        "showErrors": true,
        "unitid": "",
        "dataType": "MHoldingRegisters",
        "adr": "30",
        "quantity": "2",
        "server": "012b16bda007fdb7",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "x": 750,
        "y": 80,
        "wires": [
            [],
            [
                "0ead7636cfada085"
            ]
        ]
    },
    {
        "id": "f39f6af5da6a66eb",
        "type": "function",
        "z": "960844499113a186",
        "name": "set distance",
        "func": "var payload = msg.payload;\nvar fc=16; //preset multiple registers\nvar sa=30;\nvar addresses = 2;\nvar buf = Buffer.alloc(4);\nbuf.writeInt32BE(payload);\nvar values = [(buf[0]*256+buf[1]),(buf[2]*256)+buf[3]];\nmsg.slave_ip = \"192.168.86.110\";\nmsg.payload={\"value\":values, \"fc\": fc, \"unitid\": 1,  \"address\": sa, \"quanity\": addresses};\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "37ebc34a3d6606e2",
        "type": "inject",
        "z": "960844499113a186",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "10",
        "payloadType": "num",
        "x": 90,
        "y": 200,
        "wires": [
            [
                "69491e7dae6b1b8f"
            ]
        ]
    },
    {
        "id": "37e4e6547659c896",
        "type": "inject",
        "z": "960844499113a186",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 90,
        "y": 40,
        "wires": [
            [
                "69491e7dae6b1b8f"
            ]
        ]
    },
    {
        "id": "b07f1c1c68fcdd87",
        "type": "modbus-response",
        "z": "960844499113a186",
        "name": "",
        "registerShowMax": 20,
        "x": 970,
        "y": 520,
        "wires": []
    },
    {
        "id": "a45062a18e4348f4",
        "type": "modbus-write",
        "z": "960844499113a186",
        "name": "Set velocity",
        "showStatusActivities": true,
        "showErrors": true,
        "unitid": "",
        "dataType": "HoldingRegister",
        "adr": "29",
        "quantity": "1",
        "server": "012b16bda007fdb7",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "x": 770,
        "y": 520,
        "wires": [
            [],
            [
                "b07f1c1c68fcdd87"
            ]
        ]
    },
    {
        "id": "6dbf578ee313141b",
        "type": "inject",
        "z": "960844499113a186",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 310,
        "y": 420,
        "wires": [
            [
                "587b74cebc7267fe"
            ]
        ]
    },
    {
        "id": "b19c6cc1cabfbf27",
        "type": "inject",
        "z": "960844499113a186",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "5",
        "payloadType": "num",
        "x": 310,
        "y": 480,
        "wires": [
            [
                "587b74cebc7267fe"
            ]
        ]
    },
    {
        "id": "544109223a05c9dc",
        "type": "inject",
        "z": "960844499113a186",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "10",
        "payloadType": "num",
        "x": 310,
        "y": 540,
        "wires": [
            [
                "587b74cebc7267fe"
            ]
        ]
    },
    {
        "id": "587b74cebc7267fe",
        "type": "function",
        "z": "960844499113a186",
        "name": "",
        "func": "msg.payload = msg.payload * 240;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 520,
        "wires": [
            [
                "a45062a18e4348f4"
            ]
        ]
    },
    {
        "id": "1bac53face39cfa0",
        "type": "inject",
        "z": "960844499113a186",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0.1",
        "payloadType": "num",
        "x": 310,
        "y": 360,
        "wires": [
            [
                "587b74cebc7267fe"
            ]
        ]
    },
    {
        "id": "0e698b11b692aacf",
        "type": "inject",
        "z": "960844499113a186",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0.01",
        "payloadType": "num",
        "x": 310,
        "y": 300,
        "wires": [
            [
                "587b74cebc7267fe"
            ]
        ]
    },
    {
        "id": "66d7b5f7ea2eaa8a",
        "type": "inject",
        "z": "960844499113a186",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "100",
        "payloadType": "num",
        "x": 90,
        "y": 240,
        "wires": [
            [
                "69491e7dae6b1b8f"
            ]
        ]
    },
    {
        "id": "d46e2a1c8cfcca8f",
        "type": "modbus-read",
        "z": "420115180ec01f26",
        "name": "Read status",
        "topic": "resonance/",
        "showStatusActivities": false,
        "logIOActivities": false,
        "showErrors": false,
        "unitid": "",
        "dataType": "HoldingRegister",
        "adr": "1",
        "quantity": "1",
        "rate": "3",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "012b16bda007fdb7",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 150,
        "y": 180,
        "wires": [
            [],
            [
                "03fcc67cb6ec6f24"
            ]
        ]
    },
    {
        "id": "03fcc67cb6ec6f24",
        "type": "buffer-parser",
        "z": "420115180ec01f26",
        "name": "",
        "data": "payload.buffer",
        "dataType": "msg",
        "specification": "spec",
        "specificationType": "ui",
        "items": [
            {
                "type": "16bitbe",
                "name": "status",
                "offset": 0,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            }
        ],
        "swap1": "",
        "swap2": "",
        "swap3": "",
        "swap1Type": "swap",
        "swap2Type": "swap",
        "swap3Type": "swap",
        "msgProperty": "payload",
        "msgPropertyType": "str",
        "resultType": "keyvalue",
        "resultTypeType": "output",
        "multipleResult": false,
        "fanOutMultipleResult": false,
        "setTopic": true,
        "outputs": 1,
        "x": 330,
        "y": 180,
        "wires": [
            [
                "8ab601a76997efb6",
                "35cf037879103c2e"
            ]
        ]
    },
    {
        "id": "8ab601a76997efb6",
        "type": "function",
        "z": "420115180ec01f26",
        "name": "is moving?",
        "func": "msg.payload = msg.payload.status[0].bit4;\nif (msg.payload == 1){\n    node.status({fill:\"green\",shape:\"ring\",text:\"moving\"});\n} else {\n    node.status({fill:\"green\",shape:\"ring\",text:\"stoped\"});\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 160,
        "wires": [
            [
                "ecbb6da7df590186"
            ]
        ]
    },
    {
        "id": "ecbb6da7df590186",
        "type": "change",
        "z": "420115180ec01f26",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "ismoving",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 790,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "35cf037879103c2e",
        "type": "function",
        "z": "420115180ec01f26",
        "name": "in position?",
        "func": "msg.payload = msg.payload.status[0].bit3;\nif (msg.payload == 1){\n    node.status({fill:\"green\",shape:\"ring\",text:\"in position\"});\n} else {\n    node.status({fill:\"orange\",shape:\"ring\",text:\"not in position\"});\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 220,
        "wires": [
            [
                "cc6de6c3401eddd7"
            ]
        ]
    },
    {
        "id": "cc6de6c3401eddd7",
        "type": "change",
        "z": "420115180ec01f26",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "inposition",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 800,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "91f0cc8850e59356",
        "type": "modbus-read",
        "z": "420115180ec01f26",
        "name": "Velocity",
        "topic": "",
        "showStatusActivities": false,
        "logIOActivities": false,
        "showErrors": false,
        "unitid": "",
        "dataType": "HoldingRegister",
        "adr": "11",
        "quantity": "1",
        "rate": "3",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "012b16bda007fdb7",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 130,
        "y": 540,
        "wires": [
            [],
            [
                "e085dae9dc635458",
                "05c65c9470998fcb",
                "83ea6aa2c7be5841"
            ]
        ]
    },
    {
        "id": "e085dae9dc635458",
        "type": "buffer-parser",
        "z": "420115180ec01f26",
        "name": "",
        "data": "payload.buffer",
        "dataType": "msg",
        "specification": "spec",
        "specificationType": "ui",
        "items": [
            {
                "type": "int16be",
                "name": "velocity",
                "offset": 0,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            }
        ],
        "swap1": "",
        "swap2": "",
        "swap3": "",
        "swap1Type": "swap",
        "swap2Type": "swap",
        "swap3Type": "swap",
        "msgProperty": "payload",
        "msgPropertyType": "str",
        "resultType": "keyvalue",
        "resultTypeType": "output",
        "multipleResult": false,
        "fanOutMultipleResult": false,
        "setTopic": true,
        "outputs": 1,
        "x": 330,
        "y": 540,
        "wires": [
            [
                "1cd08893e03f586b"
            ]
        ]
    },
    {
        "id": "1cd08893e03f586b",
        "type": "function",
        "z": "420115180ec01f26",
        "name": ".00",
        "func": "msg.payload = (msg.payload.velocity / 240).toFixed(1);\nnode.status({fill:\"green\",shape:\"ring\",text: msg.payload});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "52bd9181672ab060",
        "type": "change",
        "z": "420115180ec01f26",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "velocity",
                "pt": "global",
                "to": "value",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 590,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "50eb5cd4c516fa31",
        "type": "function",
        "z": "73c9ea50fd80ed3a",
        "name": "",
        "func": "msg.payload = {\"velocity\": global.velocity};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 300,
        "wires": [
            [
                "f58a4d9cf3aca4c8"
            ]
        ]
    },
    {
        "id": "f58a4d9cf3aca4c8",
        "type": "debug",
        "z": "73c9ea50fd80ed3a",
        "name": "MQTT",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 630,
        "y": 360,
        "wires": []
    },
    {
        "id": "05c65c9470998fcb",
        "type": "function",
        "z": "420115180ec01f26",
        "name": ".00",
        "func": "const buf = Buffer.from(msg.payload.buffer)\nconst value = buf.readInt16BE();\nmsg.value = (value / 240).toFixed(1);\n\n// msg.payload = (msg.payload.velocity / 240).toFixed(1);\nnode.status({fill:\"green\",shape:\"ring\",text: msg.value});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 480,
        "wires": [
            [
                "52bd9181672ab060"
            ]
        ]
    },
    {
        "id": "83ea6aa2c7be5841",
        "type": "debug",
        "z": "420115180ec01f26",
        "name": "Velocity",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 330,
        "y": 600,
        "wires": []
    }
]