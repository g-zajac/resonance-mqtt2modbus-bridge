[
    {
        "id": "73c9ea50fd80ed3a",
        "type": "tab",
        "label": "MQTT",
        "disabled": false,
        "info": ""
    },
    {
        "id": "960844499113a186",
        "type": "tab",
        "label": "Motor set",
        "disabled": false,
        "info": ""
    },
    {
        "id": "420115180ec01f26",
        "type": "tab",
        "label": "Motor Status",
        "disabled": false,
        "info": ""
    },
    {
        "id": "c35c11b14a49f9c6",
        "type": "tab",
        "label": "Autorestart",
        "disabled": false,
        "info": ""
    },
    {
        "id": "012b16bda007fdb7",
        "type": "modbus-client",
        "name": "Stepper Motor",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "tcpHost": "192.168.86.110",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true
    },
    {
        "id": "257b46ed4735bb71",
        "type": "mqtt-broker",
        "name": "toto broker",
        "broker": "192.168.86.128",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "41ce2818206f3844",
        "type": "modbus-write",
        "z": "960844499113a186",
        "name": "SCL",
        "showStatusActivities": false,
        "showErrors": false,
        "unitid": "",
        "dataType": "HoldingRegister",
        "adr": "124",
        "quantity": "1",
        "server": "012b16bda007fdb7",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "x": 370,
        "y": 900,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "6a5425a26fe865f0",
        "type": "inject",
        "z": "960844499113a186",
        "name": "STOP",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "226",
        "payloadType": "num",
        "x": 110,
        "y": 960,
        "wires": [
            [
                "41ce2818206f3844"
            ]
        ]
    },
    {
        "id": "9411746e158d27bb",
        "type": "inject",
        "z": "960844499113a186",
        "name": "REL MOVE",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "102",
        "payloadType": "num",
        "x": 120,
        "y": 920,
        "wires": [
            [
                "41ce2818206f3844"
            ]
        ]
    },
    {
        "id": "371a79b4aee77e76",
        "type": "inject",
        "z": "960844499113a186",
        "name": "ABS MOVE",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "103",
        "payloadType": "num",
        "x": 130,
        "y": 880,
        "wires": [
            [
                "41ce2818206f3844"
            ]
        ]
    },
    {
        "id": "85c4770714912f6c",
        "type": "modbus-read",
        "z": "960844499113a186",
        "name": "Read distance",
        "topic": "",
        "showStatusActivities": false,
        "logIOActivities": false,
        "showErrors": false,
        "unitid": "",
        "dataType": "InputRegister",
        "adr": "30",
        "quantity": "2",
        "rate": "1",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "012b16bda007fdb7",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 750,
        "y": 420,
        "wires": [
            [],
            [
                "5a023d20629b330f"
            ]
        ]
    },
    {
        "id": "5a023d20629b330f",
        "type": "modbus-response",
        "z": "960844499113a186",
        "name": "",
        "registerShowMax": 20,
        "x": 950,
        "y": 420,
        "wires": []
    },
    {
        "id": "d893c2ffc0e6be22",
        "type": "inject",
        "z": "960844499113a186",
        "name": "Find home",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "120",
        "payloadType": "num",
        "x": 120,
        "y": 1000,
        "wires": [
            [
                "41ce2818206f3844"
            ]
        ]
    },
    {
        "id": "e3f0c29b.15917",
        "type": "function",
        "z": "c35c11b14a49f9c6",
        "name": "Request Token",
        "func": "msg.payload = {\n    \"client_id\": \"node-red-editor\",\n    \"grant_type\": \"password\",\n    \"scope\": \"*\",\n    \"username\": \"type or username\",\n    \"password\": \"type your password\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 400,
        "y": 140,
        "wires": [
            [
                "40715257.e3114c"
            ]
        ]
    },
    {
        "id": "62e6b42a.d2df5c",
        "type": "inject",
        "z": "c35c11b14a49f9c6",
        "name": "Manual reload",
        "props": [
            {
                "p": "payload",
                "v": "",
                "vt": "str"
            },
            {
                "p": "topic",
                "v": "",
                "vt": "string"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 190,
        "y": 140,
        "wires": [
            [
                "e3f0c29b.15917"
            ]
        ]
    },
    {
        "id": "40715257.e3114c",
        "type": "http request",
        "z": "c35c11b14a49f9c6",
        "name": "Token",
        "method": "POST",
        "ret": "txt",
        "paytoqs": false,
        "url": "http://localhost:1880/auth/token",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 590,
        "y": 140,
        "wires": [
            [
                "27f2916.2d1306e"
            ]
        ]
    },
    {
        "id": "27f2916.2d1306e",
        "type": "function",
        "z": "c35c11b14a49f9c6",
        "name": "Confirm token",
        "func": "// get the status of the request\nvar status = msg.statusCode;\n//var token = {};\nvar token = '';\nmsg.headers ={};\n\n//let node = feedback;\n\nswitch(status){\n    case 200:\n        node.log(\"Secure restart\");\n        token = JSON.parse(msg.payload);\n        token = 'Bearer '+token.access_token;\n        msg.headers = {\n            \"Authorization\": token,\n            \"Node-RED-Deployment-Type\":\"reload\"\n        }\nmsg.payload =\"\";\n        break;\n    case 204:\n        node.log(\"Secure without restart\");\n        global.set('result','\tSuccess - with no further content');\n        break;\n    case 400:\n        node.warn(\"Bad request\");\n        break;\n    case 401:\n        node.warn(\"Not authorized\");\n        break;\n    case 403:\n        node.warn(\"Forbidden\");\n        break;\n    case 404:\n        node.log(\"Unsecure restart\");\n        msg.headers = {\n            \"Node-RED-Deployment-Type\":\"reload\"\n        }\n        break;\n    case 409:\n        node.warn(\"Version mismatch\");\n        break;\n    case 500:\n        node.error(\"Server Error\");\n        break;\n    default:\n        node.warn(\"Unknown Error\");\n       break;\n}\n\nmsg.payload = \"\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 780,
        "y": 140,
        "wires": [
            [
                "cbf97372.7169f",
                "3579ab191be81104"
            ]
        ],
        "info": "Restart of Node-Red flows.\nWill check if the action needs security or not.\nNote: if the first 5 attemps return a statuscode 403 'forbidden'\nthen the server will break and only way to recover is then to\nrestart the service"
    },
    {
        "id": "cbf97372.7169f",
        "type": "http request",
        "z": "c35c11b14a49f9c6",
        "name": "Restart",
        "method": "POST",
        "ret": "txt",
        "paytoqs": false,
        "url": "http://localhost:1880/flows",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 980,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "56e0ff0a97a267e8",
        "type": "comment",
        "z": "960844499113a186",
        "name": "16bit - 65535 max",
        "info": "",
        "x": 530,
        "y": 260,
        "wires": []
    },
    {
        "id": "0ead7636cfada085",
        "type": "modbus-response",
        "z": "960844499113a186",
        "name": "",
        "registerShowMax": 20,
        "x": 950,
        "y": 320,
        "wires": []
    },
    {
        "id": "bb0bdc4c7d4f9d87",
        "type": "debug",
        "z": "960844499113a186",
        "name": "num2buffer",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 730,
        "y": 260,
        "wires": []
    },
    {
        "id": "392cd1148593d33f",
        "type": "function",
        "z": "960844499113a186",
        "name": "int -> 2x int16",
        "func": "let base = new ArrayBuffer(4); //4 bytes\nlet int16_view = new Uint16Array(base);\nlet float32_view = new Int32Array(base);\n\nfloat32_view[0] = msg.payload;\n\nlet rValue = [];\nrValue.push(int16_view[1]);\nrValue.push(int16_view[0]);\n\nmsg.payload = rValue;\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 320,
        "wires": [
            [
                "bb0bdc4c7d4f9d87",
                "4734e0a461a5e22c"
            ]
        ]
    },
    {
        "id": "fae10378dd221947",
        "type": "modbus-read",
        "z": "420115180ec01f26",
        "name": "Read temperature",
        "topic": "resonance/",
        "showStatusActivities": false,
        "logIOActivities": false,
        "showErrors": false,
        "unitid": "",
        "dataType": "HoldingRegister",
        "adr": "12",
        "quantity": "1",
        "rate": "3",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "012b16bda007fdb7",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 170,
        "y": 80,
        "wires": [
            [],
            [
                "eabb1d5b87aa3013"
            ]
        ]
    },
    {
        "id": "2b2dd7e2edddebdc",
        "type": "change",
        "z": "420115180ec01f26",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "temperature",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 800,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "eabb1d5b87aa3013",
        "type": "function",
        "z": "420115180ec01f26",
        "name": "",
        "func": "msg.payload = msg.payload.data[0] / 10;\nnode.status({fill:\"green\",shape:\"ring\",text: msg.payload});\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 80,
        "wires": [
            [
                "2b2dd7e2edddebdc"
            ]
        ]
    },
    {
        "id": "f6e0611e971e1f63",
        "type": "modbus-read",
        "z": "420115180ec01f26",
        "name": "Error code",
        "topic": "",
        "showStatusActivities": false,
        "logIOActivities": false,
        "showErrors": false,
        "unitid": "",
        "dataType": "HoldingRegister",
        "adr": "0",
        "quantity": "1",
        "rate": "5",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "012b16bda007fdb7",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 140,
        "y": 360,
        "wires": [
            [],
            [
                "45544ef58c7236e9"
            ]
        ]
    },
    {
        "id": "fc3234b0ede3d44e",
        "type": "mqtt in",
        "z": "73c9ea50fd80ed3a",
        "name": "",
        "topic": "resonance/actor/column/200/set/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "257b46ed4735bb71",
        "nl": false,
        "rap": true,
        "rh": 0,
        "x": 220,
        "y": 300,
        "wires": [
            [
                "4bd68d8733c8a9d8"
            ]
        ]
    },
    {
        "id": "2390a939bb338198",
        "type": "inject",
        "z": "73c9ea50fd80ed3a",
        "name": "call /3s",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "3",
        "crontab": "",
        "once": true,
        "onceDelay": "0.5",
        "topic": "",
        "payloadType": "date",
        "x": 160,
        "y": 600,
        "wires": [
            [
                "50eb5cd4c516fa31"
            ]
        ]
    },
    {
        "id": "69491e7dae6b1b8f",
        "type": "function",
        "z": "960844499113a186",
        "name": "scale to 1R",
        "func": "msg.payload = msg.payload * 20000;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 320,
        "wires": [
            [
                "392cd1148593d33f"
            ]
        ]
    },
    {
        "id": "efcd973cf9259154",
        "type": "inject",
        "z": "960844499113a186",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 130,
        "y": 320,
        "wires": [
            [
                "69491e7dae6b1b8f"
            ]
        ]
    },
    {
        "id": "1dcb40b0e44349be",
        "type": "inject",
        "z": "960844499113a186",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "2",
        "payloadType": "num",
        "x": 130,
        "y": 360,
        "wires": [
            [
                "69491e7dae6b1b8f"
            ]
        ]
    },
    {
        "id": "366bfde2ae019b87",
        "type": "inject",
        "z": "960844499113a186",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "4",
        "payloadType": "num",
        "x": 130,
        "y": 400,
        "wires": [
            [
                "69491e7dae6b1b8f"
            ]
        ]
    },
    {
        "id": "4734e0a461a5e22c",
        "type": "modbus-write",
        "z": "960844499113a186",
        "name": "Set distance",
        "showStatusActivities": true,
        "showErrors": true,
        "unitid": "",
        "dataType": "MHoldingRegisters",
        "adr": "30",
        "quantity": "2",
        "server": "012b16bda007fdb7",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "x": 730,
        "y": 320,
        "wires": [
            [],
            [
                "0ead7636cfada085"
            ]
        ]
    },
    {
        "id": "f39f6af5da6a66eb",
        "type": "function",
        "z": "960844499113a186",
        "name": "set distance",
        "func": "var payload = msg.payload;\nvar fc=16; //preset multiple registers\nvar sa=30;\nvar addresses = 2;\nvar buf = Buffer.alloc(4);\nbuf.writeInt32BE(payload);\nvar values = [(buf[0]*256+buf[1]),(buf[2]*256)+buf[3]];\nmsg.slave_ip = \"192.168.86.110\";\nmsg.payload={\"value\":values, \"fc\": fc, \"unitid\": 1,  \"address\": sa, \"quanity\": addresses};\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "37ebc34a3d6606e2",
        "type": "inject",
        "z": "960844499113a186",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "10",
        "payloadType": "num",
        "x": 130,
        "y": 440,
        "wires": [
            [
                "69491e7dae6b1b8f"
            ]
        ]
    },
    {
        "id": "37e4e6547659c896",
        "type": "inject",
        "z": "960844499113a186",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 130,
        "y": 280,
        "wires": [
            [
                "69491e7dae6b1b8f"
            ]
        ]
    },
    {
        "id": "b07f1c1c68fcdd87",
        "type": "modbus-response",
        "z": "960844499113a186",
        "name": "",
        "registerShowMax": 20,
        "x": 790,
        "y": 720,
        "wires": []
    },
    {
        "id": "a45062a18e4348f4",
        "type": "modbus-write",
        "z": "960844499113a186",
        "name": "Set velocity",
        "showStatusActivities": true,
        "showErrors": true,
        "unitid": "",
        "dataType": "HoldingRegister",
        "adr": "29",
        "quantity": "1",
        "server": "012b16bda007fdb7",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "x": 590,
        "y": 720,
        "wires": [
            [],
            [
                "b07f1c1c68fcdd87"
            ]
        ]
    },
    {
        "id": "6dbf578ee313141b",
        "type": "inject",
        "z": "960844499113a186",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 130,
        "y": 660,
        "wires": [
            [
                "587b74cebc7267fe"
            ]
        ]
    },
    {
        "id": "b19c6cc1cabfbf27",
        "type": "inject",
        "z": "960844499113a186",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "5",
        "payloadType": "num",
        "x": 130,
        "y": 700,
        "wires": [
            [
                "587b74cebc7267fe"
            ]
        ]
    },
    {
        "id": "544109223a05c9dc",
        "type": "inject",
        "z": "960844499113a186",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "10",
        "payloadType": "num",
        "x": 130,
        "y": 740,
        "wires": [
            [
                "587b74cebc7267fe"
            ]
        ]
    },
    {
        "id": "587b74cebc7267fe",
        "type": "function",
        "z": "960844499113a186",
        "name": "",
        "func": "var vel = msg.payload * 240;\nmsg.payload = {};\nmsg.payload = vel;\nnode.status({fill:\"green\",shape:\"ring\",text: msg.payload});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 720,
        "wires": [
            [
                "a45062a18e4348f4"
            ]
        ]
    },
    {
        "id": "1bac53face39cfa0",
        "type": "inject",
        "z": "960844499113a186",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0.1",
        "payloadType": "num",
        "x": 130,
        "y": 620,
        "wires": [
            [
                "587b74cebc7267fe"
            ]
        ]
    },
    {
        "id": "0e698b11b692aacf",
        "type": "inject",
        "z": "960844499113a186",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0.01",
        "payloadType": "num",
        "x": 130,
        "y": 580,
        "wires": [
            [
                "587b74cebc7267fe"
            ]
        ]
    },
    {
        "id": "66d7b5f7ea2eaa8a",
        "type": "inject",
        "z": "960844499113a186",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "100",
        "payloadType": "num",
        "x": 130,
        "y": 480,
        "wires": [
            [
                "69491e7dae6b1b8f"
            ]
        ]
    },
    {
        "id": "d46e2a1c8cfcca8f",
        "type": "modbus-read",
        "z": "420115180ec01f26",
        "name": "Read status",
        "topic": "resonance/",
        "showStatusActivities": false,
        "logIOActivities": false,
        "showErrors": false,
        "unitid": "",
        "dataType": "HoldingRegister",
        "adr": "1",
        "quantity": "1",
        "rate": "1",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "012b16bda007fdb7",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 150,
        "y": 180,
        "wires": [
            [],
            [
                "03fcc67cb6ec6f24"
            ]
        ]
    },
    {
        "id": "03fcc67cb6ec6f24",
        "type": "buffer-parser",
        "z": "420115180ec01f26",
        "name": "",
        "data": "payload.buffer",
        "dataType": "msg",
        "specification": "spec",
        "specificationType": "ui",
        "items": [
            {
                "type": "16bitbe",
                "name": "status",
                "offset": 0,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            }
        ],
        "swap1": "",
        "swap2": "",
        "swap3": "",
        "swap1Type": "swap",
        "swap2Type": "swap",
        "swap3Type": "swap",
        "msgProperty": "payload",
        "msgPropertyType": "str",
        "resultType": "keyvalue",
        "resultTypeType": "output",
        "multipleResult": false,
        "fanOutMultipleResult": false,
        "setTopic": true,
        "outputs": 1,
        "x": 330,
        "y": 180,
        "wires": [
            [
                "8ab601a76997efb6",
                "35cf037879103c2e"
            ]
        ]
    },
    {
        "id": "8ab601a76997efb6",
        "type": "function",
        "z": "420115180ec01f26",
        "name": "is moving?",
        "func": "msg.payload = msg.payload.status[0].bit4;\nif (msg.payload == 1){\n    node.status({fill:\"green\",shape:\"ring\",text:\"moving\"});\n} else {\n    node.status({fill:\"green\",shape:\"ring\",text:\"stoped\"});\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 160,
        "wires": [
            [
                "ecbb6da7df590186"
            ]
        ]
    },
    {
        "id": "ecbb6da7df590186",
        "type": "change",
        "z": "420115180ec01f26",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "ismoving",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 790,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "35cf037879103c2e",
        "type": "function",
        "z": "420115180ec01f26",
        "name": "in position?",
        "func": "msg.payload = msg.payload.status[0].bit3;\nif (msg.payload == 1){\n    node.status({fill:\"green\",shape:\"ring\",text:\"in position\"});\n} else {\n    node.status({fill:\"orange\",shape:\"ring\",text:\"not in position\"});\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 220,
        "wires": [
            [
                "cc6de6c3401eddd7"
            ]
        ]
    },
    {
        "id": "cc6de6c3401eddd7",
        "type": "change",
        "z": "420115180ec01f26",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "onposition",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 800,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "91f0cc8850e59356",
        "type": "modbus-read",
        "z": "420115180ec01f26",
        "name": "Velocity",
        "topic": "",
        "showStatusActivities": false,
        "logIOActivities": false,
        "showErrors": false,
        "unitid": "",
        "dataType": "HoldingRegister",
        "adr": "11",
        "quantity": "1",
        "rate": "1",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "012b16bda007fdb7",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 130,
        "y": 500,
        "wires": [
            [],
            [
                "05c65c9470998fcb"
            ]
        ]
    },
    {
        "id": "52bd9181672ab060",
        "type": "change",
        "z": "420115180ec01f26",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "velocity",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 790,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "50eb5cd4c516fa31",
        "type": "function",
        "z": "73c9ea50fd80ed3a",
        "name": "form sys json",
        "func": "msg.payload = {\n    \"position\": global.get(\"position\"),\n    \"velocity\": global.get(\"velocity\"),\n    \"ismoving\": global.get(\"ismoving\"),\n    \"onposition\": global.get(\"onposition\"),\n    \"version\": global.get(\"version\"),\n};\n// node.status({fill:\"green\",shape:\"ring\",text:\"sending MQTT\"});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 600,
        "wires": [
            [
                "8779b5765209ea28"
            ]
        ]
    },
    {
        "id": "05c65c9470998fcb",
        "type": "function",
        "z": "420115180ec01f26",
        "name": ".00",
        "func": "const buf = Buffer.from(msg.payload.buffer)\nconst value = buf.readInt16BE();\nmsg.value = (value / 240).toFixed(2);\n\n// msg.payload = (msg.payload.velocity / 240).toFixed(1);\nnode.status({fill:\"green\",shape:\"ring\",text: msg.value});\n\nmsg.payload = parseFloat(msg.value, 10);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 500,
        "wires": [
            [
                "52bd9181672ab060"
            ]
        ]
    },
    {
        "id": "c1059ef16feb74a3",
        "type": "modbus-read",
        "z": "420115180ec01f26",
        "name": "Position",
        "topic": "",
        "showStatusActivities": false,
        "logIOActivities": false,
        "showErrors": false,
        "unitid": "",
        "dataType": "HoldingRegister",
        "adr": "7",
        "quantity": "2",
        "rate": "3",
        "rateUnit": "s",
        "delayOnStart": false,
        "startDelayTime": "",
        "server": "012b16bda007fdb7",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 140,
        "y": 600,
        "wires": [
            [],
            [
                "5d8ccac722a27179"
            ]
        ]
    },
    {
        "id": "e2a96c9fbe609e5c",
        "type": "change",
        "z": "420115180ec01f26",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "position",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 790,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "5d8ccac722a27179",
        "type": "function",
        "z": "420115180ec01f26",
        "name": "",
        "func": "// const buf = Buffer.from(msg.payload.buffer)\n// const value = buf.readUInt32BE();\n// node.status({fill:\"green\",shape:\"ring\",text: value});\n// msg.value = value;\n// return msg\n\nlet base = new ArrayBuffer(4); //4 bytes\nlet int16_view = new Int16Array(base);\nlet int32_view = new Int32Array(base);\n\nint16_view[0] = msg.payload.data[0];\nint16_view[1] = msg.payload.data[1];\n\nmsg.payload = ((int32_view[0]) / 2000).toFixed(2);\nmsg.payload = parseInt(msg.payload, 10);\n\nnode.status({fill:\"green\",shape:\"ring\",text: msg.payload});\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 600,
        "wires": [
            [
                "e2a96c9fbe609e5c"
            ]
        ]
    },
    {
        "id": "77906846d0114f3d",
        "type": "inject",
        "z": "73c9ea50fd80ed3a",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "100",
        "payloadType": "num",
        "x": 110,
        "y": 40,
        "wires": [
            [
                "9cd9af32e83c91fd"
            ]
        ]
    },
    {
        "id": "9cd9af32e83c91fd",
        "type": "change",
        "z": "73c9ea50fd80ed3a",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "deviceid",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 310,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "519d57b1cfd8afda",
        "type": "inject",
        "z": "73c9ea50fd80ed3a",
        "name": "Versio n",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.2",
        "topic": "",
        "payload": "1.0.1",
        "payloadType": "str",
        "x": 110,
        "y": 140,
        "wires": [
            [
                "faca29c73a1ee190"
            ]
        ]
    },
    {
        "id": "8779b5765209ea28",
        "type": "mqtt out",
        "z": "73c9ea50fd80ed3a",
        "name": "",
        "topic": "resonance/actor/column/200/sys",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "257b46ed4735bb71",
        "x": 660,
        "y": 600,
        "wires": []
    },
    {
        "id": "4bd68d8733c8a9d8",
        "type": "switch",
        "z": "73c9ea50fd80ed3a",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "resonance/actor/column/200/set/position",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "resonance/actor/column/200/set/velocity",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "resonance/actor/column/200/set/command",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "resonance/actor/column/200/set/reload",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 490,
        "y": 300,
        "wires": [
            [
                "f53a29fb9cbe890d"
            ],
            [
                "4bcaf02f11cb092d"
            ],
            [
                "d3673e5bf7b3859b"
            ],
            [
                "185beb73bc4f3944"
            ]
        ]
    },
    {
        "id": "a8731d5ae22a77e4",
        "type": "link out",
        "z": "73c9ea50fd80ed3a",
        "name": "mqtt position",
        "links": [
            "60a024f7a5d21307"
        ],
        "x": 815,
        "y": 220,
        "wires": []
    },
    {
        "id": "f53a29fb9cbe890d",
        "type": "function",
        "z": "73c9ea50fd80ed3a",
        "name": "pos",
        "func": "var pos = parseInt(msg.payload, 10);\nmsg.payload = {};\nmsg.payload = pos;\nnode.status({fill:\"green\",shape:\"ring\",text: msg.payload});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 220,
        "wires": [
            [
                "a8731d5ae22a77e4"
            ]
        ]
    },
    {
        "id": "4bcaf02f11cb092d",
        "type": "function",
        "z": "73c9ea50fd80ed3a",
        "name": "vel",
        "func": "var vel = parseFloat(msg.payload, 10);\nmsg.payload = {};\nmsg.payload = vel;\nnode.status({fill:\"green\",shape:\"ring\",text: msg.payload});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 280,
        "wires": [
            [
                "3a394d25bc5a5726"
            ]
        ]
    },
    {
        "id": "3a394d25bc5a5726",
        "type": "link out",
        "z": "73c9ea50fd80ed3a",
        "name": "mqtt velocity",
        "links": [
            "914ba32a9f60adba"
        ],
        "x": 815,
        "y": 280,
        "wires": []
    },
    {
        "id": "d3673e5bf7b3859b",
        "type": "function",
        "z": "73c9ea50fd80ed3a",
        "name": "cmd",
        "func": "if (msg.payload == \"start\"){\n    node.status({fill:\"green\",shape:\"ring\",text: \"start\"});\n    msg.command = 103;\n} else if (msg.payload == \"stop\"){\n    node.status({fill:\"orange\",shape:\"ring\",text: \"stop\"});\n    msg.command = 226;\n} else if (msg.payload == \"home\"){\n    msg.command = 120;\n} else if (msg.payload == \"reset\"){\n   msg.command = 186; \n} else {\n    node.status({fill:\"red\",shape:\"ring\",text: \"comand not recognized\"});\n}\nnode.status({fill:\"green\",shape:\"ring\",text: msg.payload});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 340,
        "wires": [
            [
                "8705f80c491efc42"
            ]
        ]
    },
    {
        "id": "8705f80c491efc42",
        "type": "link out",
        "z": "73c9ea50fd80ed3a",
        "name": "mqtt command",
        "links": [
            "519b8ee994f4cefe"
        ],
        "x": 815,
        "y": 340,
        "wires": []
    },
    {
        "id": "60a024f7a5d21307",
        "type": "link in",
        "z": "960844499113a186",
        "name": "distance",
        "links": [
            "a8731d5ae22a77e4"
        ],
        "x": 155,
        "y": 240,
        "wires": [
            [
                "69491e7dae6b1b8f"
            ]
        ]
    },
    {
        "id": "914ba32a9f60adba",
        "type": "link in",
        "z": "960844499113a186",
        "name": "velocity",
        "links": [
            "3a394d25bc5a5726"
        ],
        "x": 155,
        "y": 540,
        "wires": [
            [
                "587b74cebc7267fe"
            ]
        ]
    },
    {
        "id": "519b8ee994f4cefe",
        "type": "link in",
        "z": "960844499113a186",
        "name": "command",
        "links": [
            "8705f80c491efc42"
        ],
        "x": 55,
        "y": 840,
        "wires": [
            [
                "9741ddceef4dd66f"
            ]
        ]
    },
    {
        "id": "9741ddceef4dd66f",
        "type": "change",
        "z": "960844499113a186",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "command",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 180,
        "y": 840,
        "wires": [
            [
                "41ce2818206f3844"
            ]
        ]
    },
    {
        "id": "45544ef58c7236e9",
        "type": "buffer-parser",
        "z": "420115180ec01f26",
        "name": "",
        "data": "payload.buffer",
        "dataType": "msg",
        "specification": "spec",
        "specificationType": "ui",
        "items": [
            {
                "type": "hex",
                "name": "status",
                "offset": 0,
                "length": 1,
                "offsetbit": 0,
                "scale": "1",
                "mask": ""
            }
        ],
        "swap1": "",
        "swap2": "",
        "swap3": "",
        "swap1Type": "swap",
        "swap2Type": "swap",
        "swap3Type": "swap",
        "msgProperty": "payload",
        "msgPropertyType": "str",
        "resultType": "keyvalue",
        "resultTypeType": "output",
        "multipleResult": false,
        "fanOutMultipleResult": false,
        "setTopic": true,
        "outputs": 1,
        "x": 330,
        "y": 360,
        "wires": [
            [
                "d60872c1af568d80"
            ]
        ]
    },
    {
        "id": "a817146b1b051137",
        "type": "mqtt out",
        "z": "420115180ec01f26",
        "name": "",
        "topic": "resonance/actor/column/200/error",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "257b46ed4735bb71",
        "x": 840,
        "y": 360,
        "wires": []
    },
    {
        "id": "d60872c1af568d80",
        "type": "function",
        "z": "420115180ec01f26",
        "name": "",
        "func": "msg.payload = msg.payload.status;\nmsg.payload = parseInt(msg.payload, 10);\n\nif (msg.payload == 0){\n    node.status({fill:\"green\",shape:\"ring\",text: msg.payload});\n} else {\n    node.status({fill:\"red\",shape:\"ring\",text: msg.payload});\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 360,
        "wires": [
            [
                "a817146b1b051137"
            ]
        ]
    },
    {
        "id": "6fc0afb984fa03af",
        "type": "comment",
        "z": "420115180ec01f26",
        "name": "AR command to clear alarm",
        "info": "",
        "x": 180,
        "y": 320,
        "wires": []
    },
    {
        "id": "3b44d0a1ee6365a3",
        "type": "inject",
        "z": "960844499113a186",
        "name": "clear alarm",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "186",
        "payloadType": "num",
        "x": 120,
        "y": 1040,
        "wires": [
            [
                "41ce2818206f3844"
            ]
        ]
    },
    {
        "id": "d57da1e7e1967809",
        "type": "link in",
        "z": "c35c11b14a49f9c6",
        "name": "reload flow",
        "links": [
            "185beb73bc4f3944"
        ],
        "x": 235,
        "y": 80,
        "wires": [
            [
                "e3f0c29b.15917"
            ]
        ]
    },
    {
        "id": "185beb73bc4f3944",
        "type": "link out",
        "z": "73c9ea50fd80ed3a",
        "name": "mqtt reload",
        "links": [
            "d57da1e7e1967809"
        ],
        "x": 655,
        "y": 400,
        "wires": []
    },
    {
        "id": "967412eebc995b62",
        "type": "trigger",
        "z": "420115180ec01f26",
        "name": "",
        "op1": "1",
        "op2": "0",
        "op1type": "val",
        "op2type": "val",
        "duration": "250",
        "extend": "false",
        "overrideDelay": "false",
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 590,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "faca29c73a1ee190",
        "type": "change",
        "z": "73c9ea50fd80ed3a",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "version",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 290,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "37b4a191a159a072",
        "type": "ping",
        "z": "c35c11b14a49f9c6",
        "protocol": "IPv4",
        "mode": "timed",
        "name": "ping motor /15s",
        "host": "192.168.86.110",
        "timer": "6",
        "inputs": 0,
        "x": 180,
        "y": 360,
        "wires": [
            [
                "b587e22004af26b6",
                "2b5ee49a677bbbf0"
            ]
        ]
    },
    {
        "id": "b587e22004af26b6",
        "type": "function",
        "z": "c35c11b14a49f9c6",
        "name": "",
        "func": "if (!msg.payload){\n    node.status({fill:\"red\",shape:\"ring\",text:\"disconnected\"});\n    msg.payload = {};\n    msg.payload = 0;\n    return msg;\n} else {\n    node.status({fill:\"green\",shape:\"ring\",text:\"connected\"});\n    msg.payload = {};\n    msg.payload = 10;\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 360,
        "wires": [
            [
                "f901088e63654cc8",
                "b59e278cf9bbc1e5",
                "43a8756548a2b6cb"
            ]
        ]
    },
    {
        "id": "02184bb9a7438137",
        "type": "debug",
        "z": "c35c11b14a49f9c6",
        "name": "triger",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 970,
        "y": 360,
        "wires": []
    },
    {
        "id": "5c16b066e6e5024c",
        "type": "delay",
        "z": "c35c11b14a49f9c6",
        "name": "",
        "pauseType": "delay",
        "timeout": "10",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "x": 780,
        "y": 360,
        "wires": [
            [
                "02184bb9a7438137"
            ]
        ]
    },
    {
        "id": "f901088e63654cc8",
        "type": "debug",
        "z": "c35c11b14a49f9c6",
        "name": "fn",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 590,
        "y": 300,
        "wires": []
    },
    {
        "id": "2b5ee49a677bbbf0",
        "type": "debug",
        "z": "c35c11b14a49f9c6",
        "name": "ping",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 380,
        "y": 300,
        "wires": []
    },
    {
        "id": "b59e278cf9bbc1e5",
        "type": "rising-edge",
        "z": "c35c11b14a49f9c6",
        "name": "0->10",
        "threshold": "5",
        "x": 590,
        "y": 360,
        "wires": [
            [
                "5c16b066e6e5024c"
            ]
        ]
    },
    {
        "id": "3579ab191be81104",
        "type": "debug",
        "z": "c35c11b14a49f9c6",
        "name": "RESTART",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 980,
        "y": 180,
        "wires": []
    },
    {
        "id": "43a8756548a2b6cb",
        "type": "function",
        "z": "c35c11b14a49f9c6",
        "name": "",
        "func": "if (msg.payload == 0){\n    msg.payload = \"no connection with motor\";\nreturn msg;\n} else {\n    return;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 440,
        "wires": [
            [
                "c7b3ce7e91fd7c1e"
            ]
        ]
    },
    {
        "id": "c7b3ce7e91fd7c1e",
        "type": "link out",
        "z": "c35c11b14a49f9c6",
        "name": "lost connection msg",
        "links": [
            "4129c7df76bdf6c3"
        ],
        "x": 765,
        "y": 440,
        "wires": []
    },
    {
        "id": "4129c7df76bdf6c3",
        "type": "link in",
        "z": "420115180ec01f26",
        "name": "mqtt error msg",
        "links": [
            "c7b3ce7e91fd7c1e"
        ],
        "x": 605,
        "y": 320,
        "wires": [
            [
                "a817146b1b051137"
            ]
        ]
    }
]